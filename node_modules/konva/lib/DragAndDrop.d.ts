import type { Node } from './Node.ts';
import type { Vector2d } from './types.ts';
export declare const DD: {
    readonly isDragging: boolean;
    justDragged: boolean;
    readonly node: Node<{
        x?: number;
        y?: number;
        width?: number;
        height?: number;
        visible?: boolean;
        listening?: boolean;
        id?: string;
        name?: string;
        opacity?: number;
        scale?: Vector2d;
        scaleX?: number;
        skewX?: number;
        skewY?: number;
        scaleY?: number;
        rotation?: number;
        rotationDeg?: number;
        offset?: Vector2d;
        offsetX?: number;
        offsetY?: number;
        draggable?: boolean;
        dragDistance?: number;
        dragBoundFunc?: (this: Node, pos: Vector2d) => Vector2d;
        preventDefault?: boolean;
        globalCompositeOperation?: "" | "source-over" | "source-in" | "source-out" | "source-atop" | "destination-over" | "destination-in" | "destination-out" | "destination-atop" | "lighter" | "copy" | "xor" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "color" | "luminosity";
        filters?: (string | import("./Node.ts").FilterFunction)[];
    }> | undefined;
    _dragElements: Map<number, {
        node: Node;
        startPointerPos: Vector2d;
        offset: Vector2d;
        pointerId?: number;
        dragStatus: "ready" | "dragging" | "stopped";
    }>;
    _drag(evt: any): void;
    _endDragBefore(evt?: any): void;
    _endDragAfter(evt: any): void;
};
